package com.lead.config.filter;

import java.io.IOException;
import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.lead.entity.Member;

import jakarta.servlet.FilterChain;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class JWTAuthenticationFilter extends UsernamePasswordAuthenticationFilter {

    private final AuthenticationManager authManager;
    private static final Logger log = LoggerFactory.getLogger(JWTAuthenticationFilter.class);

    @Override
    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) {
        ObjectMapper mapper = new ObjectMapper();
        try {
            Member member = mapper.readValue(request.getInputStream(), Member.class);
            Authentication authToken = new UsernamePasswordAuthenticationToken(member.getUsername(), member.getPw());
            return authManager.authenticate(authToken);
        } catch (Exception e) {
            log.error("인증 오류 발생: {}", e.getMessage());
            response.setStatus(HttpStatus.UNAUTHORIZED.value());
            response.setContentType("application/json");
            try {
                response.getWriter().write("{\"error\": \"잘못된 사용자 이름 또는 비밀번호입니다.\"}");
            } catch (IOException ioException) {
                log.error("응답 작성 오류: {}", ioException.getMessage());
            }
            return null;
        }
    }

    @Override
    protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, 
                                             FilterChain chain, Authentication authResult) {
        User user = (User) authResult.getPrincipal();
        String token = JWT.create()
                          .withExpiresAt(new Date(System.currentTimeMillis() + 1000 * 60 * 60))
                          .withClaim("username", user.getUsername())
                          .sign(Algorithm.HMAC256("com.lead.jwt")); // 비밀 키 확인 필요
        response.addHeader(HttpHeaders.AUTHORIZATION, "Bearer " + token);
        response.setStatus(HttpStatus.OK.value());
    }
}
