package com.lead.config.filter;

import java.io.IOException;
import java.util.Date;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import com.lead.entity.Member;

@Slf4j
@RequiredArgsConstructor
public class JWTAuthenticationFilter extends UsernamePasswordAuthenticationFilter {

    private final AuthenticationManager authenticationManager;

    @Override
    public Authentication attemptAuthentication(HttpServletRequest req, HttpServletResponse res) {
        ObjectMapper mapper = new ObjectMapper();
        try {
            // 요청 본문에서 Member 객체 추출
            Member member = mapper.readValue(req.getInputStream(), Member.class);
            Authentication authToken = new UsernamePasswordAuthenticationToken(member.getUsername(), member.getPw());
            return authenticationManager.authenticate(authToken);
        } catch (Exception e) {
            log.error("Authentication error: " + e.getMessage());
        }
        res.setStatus(HttpStatus.UNAUTHORIZED.value());
        return null;
    }

    @Override
    protected void successfulAuthentication(HttpServletRequest req, HttpServletResponse res, FilterChain chain, Authentication authResult)
            throws IOException, ServletException {
        log.info("successfulAuthentication");
        User user = (User) authResult.getPrincipal();
        String token = JWT.create()
                .withExpiresAt(new Date(System.currentTimeMillis() + 1000 * 60 * 1000)) // 1000분 동안 유효
                .withClaim("username", user.getUsername())
                .sign(Algorithm.HMAC256("pnu.edu.jwt")); // JWT 비밀 키 설정
        res.addHeader(HttpHeaders.AUTHORIZATION, "Bearer " + token);
        res.setStatus(HttpStatus.OK.value());
    }
}
