import java.io.IOException;
import java.util.Date;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.lead.entity.Member;
import com.lead.repository.MemberRepo;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class JWTAuthenticationFilter extends UsernamePasswordAuthenticationFilter {

    private final AuthenticationManager authManager;
    private final MemberRepo memberRepo;
    private final PasswordEncoder passwordEncoder;

    public JWTAuthenticationFilter(AuthenticationManager authManager, MemberRepo memberRepo, PasswordEncoder passwordEncoder) {
        this.authManager = authManager;
        this.memberRepo = memberRepo;
        this.passwordEncoder = passwordEncoder;
    }

    @Override
    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {
        try {
            // 요청에서 username과 password 추출
            String username = request.getParameter("username");
            String password = request.getParameter("password");

            log.info("사용자 인증 시도: {}", username);

            // DB에서 사용자 조회
            Member dbMember = memberRepo.findById(username)
                .orElseThrow(() -> new AuthenticationException("잘못된 사용자명 또는 비밀번호입니다.") {});

            // 비밀번호 검증
            if (!passwordEncoder.matches(password, dbMember.getPw())) {
                throw new AuthenticationException("잘못된 사용자명 또는 비밀번호입니다.") {};
            }

            Authentication authToken = new UsernamePasswordAuthenticationToken(username, password);
            return authManager.authenticate(authToken);
        } catch (Exception e) {
            log.error("인증 오류 발생: {}", e.getMessage());
            response.setStatus(HttpStatus.UNAUTHORIZED.value());
            response.setContentType("application/json");
            try {
                response.getWriter().write("{\"error\": \"잘못된 사용자명 또는 비밀번호입니다.\"}");
            } catch (IOException ioException) {
                log.error("응답 작성 오류 발생: {}", ioException.getMessage());
            }
            return null;
        }
    }

    @Override
    protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult) throws IOException, ServletException {
        User user = (User) authResult.getPrincipal();
        String token = JWT.create()
                          .withExpiresAt(new Date(System.currentTimeMillis() + 1000 * 60 * 60))
                          .withClaim("username", user.getUsername())
                          .sign(Algorithm.HMAC256("com.lead.jwt")); // 적절한 비밀 키를 설정

        response.addHeader(HttpHeaders.AUTHORIZATION, "Bearer " + token);
        response.setStatus(HttpStatus.OK.value());
    }
}
