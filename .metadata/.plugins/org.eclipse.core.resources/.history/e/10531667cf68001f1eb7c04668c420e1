package com.lead.config.filter;

import java.io.IOException;
import java.util.Optional;

import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
import org.springframework.web.filter.OncePerRequestFilter;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import com.lead.entity.Member;
import com.lead.repository.MemberRepo;

@RequiredArgsConstructor
public class JWTAuthorizationFilter extends OncePerRequestFilter {

    private final MemberRepo memRepo;

    @Override
    protected void doFilterInternal(HttpServletRequest req, HttpServletResponse res, FilterChain chain)
            throws IOException, ServletException {

        String srcToken = req.getHeader("Authorization");

        // JWT 토큰이 없거나 형식이 맞지 않으면 다음 필터로 진행
        if (srcToken == null || !srcToken.startsWith("Bearer ")) {
            chain.doFilter(req, res);
            return;
        }

        String jwtToken = srcToken.replace("Bearer ", "");

        // JWT 토큰에서 사용자 이름 추출
        String username = JWT.require(Algorithm.HMAC256("pnu.edu.jwt"))
                .build()
                .verify(jwtToken)
                .getClaim("username")
                .asString();

        // 사용자 정보를 데이터베이스에서 조회
        Optional<Member> opt = memRepo.findById(username);
        if (!opt.isPresent()) {
            chain.doFilter(req, res);
            return;
        }

        Member findmem = opt.get();

        // 사용자 객체 생성 (Spring Security의 User 객체 사용)
        User user = new User(
                findmem.getUsername(),
                findmem.getPw(),
                AuthorityUtils.createAuthorityList(findmem.getRole().toString())
        );

        // Spring Security 컨텍스트에 인증 정보 설정
        Authentication auth = new UsernamePasswordAuthenticationToken(user, null, user.getAuthorities());
        SecurityContextHolder.getContext().setAuthentication(auth);

        // 다음 필터로 진행
        chain.doFilter(req, res);
    }
}
